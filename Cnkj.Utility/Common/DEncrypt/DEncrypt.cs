using System;
using System.Security.Cryptography;  
using System.Text;

namespace Common.DEncrypt
{
    /// <summary>
    /// Encrypt 的摘要说明。
    /// </summary>
    public static class DEncrypt
    {

        #region 使用 缺省密钥字符串 加密/解密string

        /// <summary>
        /// 使用缺省密钥字符串加密string
        /// </summary>
        /// <param name="original">明文</param>
        /// <returns>密文</returns>
        public static string Encrypt(string original)
        {
            return Encrypt(original,"SJFE");
        }
        /// <summary>
        /// 使用缺省密钥字符串解密string
        /// </summary>
        /// <param name="original">密文</param>
        /// <returns>明文</returns>
        public static string Decrypt(string original)
        {
            return Decrypt(original, "SJFE", System.Text.Encoding.Default);
        }

        #endregion

        #region 使用 给定密钥字符串 加密/解密string
        /// <summary>
        /// 使用给定密钥字符串加密string
        /// </summary>
        /// <param name="original">原始文字</param>
        /// <param name="key">密钥</param>
        /// <returns>密文</returns>
        public static string Encrypt(string original, string key)  
        {  
            byte[] buff = System.Text.Encoding.Default.GetBytes(original);  
            byte[] kb = System.Text.Encoding.Default.GetBytes(key);
            return Convert.ToBase64String(Encrypt(buff, kb));     
        }
        /// <summary>
        /// 使用给定密钥字符串解密string
        /// </summary>
        /// <param name="original">密文</param>
        /// <param name="key">密钥</param>
        /// <returns>明文</returns>
        public static string Decrypt(string original, string key)
        {
            return Decrypt(original,key,System.Text.Encoding.Default);
        }

        /// <summary>
        /// 使用给定密钥字符串解密string,返回指定编码方式明文
        /// </summary>
        /// <param name="encrypted">密文</param>
        /// <param name="key">密钥</param>
        /// <param name="encoding">字符编码方案</param>
        /// <returns>明文</returns>
        public static string Decrypt(string encrypted, string key,Encoding encoding)  
        {       
            byte[] buff = Convert.FromBase64String(encrypted);  
            byte[] kb = System.Text.Encoding.Default.GetBytes(key);
            return encoding.GetString(Decrypt(buff,kb));      
        }  
        #endregion

        #region 使用 缺省密钥字符串 加密/解密/byte[]
        /// <summary>
        /// 使用缺省密钥字符串解密byte[]
        /// </summary>
        /// <param name="encrypted">密文</param>
        /// <returns>明文</returns>
        public static byte[] Decrypt(byte[] encrypted)  
        {
            byte[] key = System.Text.Encoding.Default.GetBytes("SJFE"); 
            return Decrypt(encrypted,key);     
        }
        /// <summary>
        /// 使用缺省密钥字符串加密
        /// </summary>
        /// <param name="original">原始数据</param>
        /// <returns>密文</returns>
        public static byte[] Encrypt(byte[] original)  
        {
            byte[] key = System.Text.Encoding.Default.GetBytes("SJFE"); 
            return Encrypt(original,key);     
        }  
        #endregion

        #region  使用 给定密钥 加密/解密/byte[]

        /// <summary>
        /// 使用给定密钥加密
        /// </summary>
        /// <param name="original">明文</param>
        /// <param name="key">密钥</param>
        /// <returns>密文</returns>
        public static byte[] Encrypt(byte[] original, byte[] key)  
        {  
            TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();       
            des.Key =  MD5.GetMd5Hash(key);
            des.Mode = CipherMode.ECB;  
     
            return des.CreateEncryptor().TransformFinalBlock(original, 0, original.Length);     
        }  

        /// <summary>
        /// 使用给定密钥解密数据
        /// </summary>
        /// <param name="encrypted">密文</param>
        /// <param name="key">密钥</param>
        /// <returns>明文</returns>
        public static byte[] Decrypt(byte[] encrypted, byte[] key)  
        {  
            TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();
            des.Key = MD5.GetMd5Hash(key);  
            des.Mode = CipherMode.ECB;  

            return des.CreateDecryptor().TransformFinalBlock(encrypted, 0, encrypted.Length);
        }  
  
        #endregion

		

		
    }
}